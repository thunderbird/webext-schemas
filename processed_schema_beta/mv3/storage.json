[
    {
        "allowedContexts": [
            "content",
            "devtools"
        ],
        "defaultContexts": [
            "content",
            "devtools"
        ],
        "description": "Use the <code>browser.storage</code> API to store, retrieve, and track changes to user data.",
        "events": [
            {
                "description": "Fired when one or more items change.",
                "mdn_url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/storage/onChanged",
                "name": "onChanged",
                "parameters": [
                    {
                        "additionalProperties": {
                            "$ref": "StorageChange"
                        },
                        "description": "Object mapping each key that changed to its corresponding $(ref:storage.StorageChange) for that item.",
                        "name": "changes",
                        "type": "object"
                    },
                    {
                        "description": "The name of the storage area (<code>\"sync\"</code>, <code>\"local\"</code> or <code>\"managed\"</code>) the changes are for.",
                        "name": "areaName",
                        "type": "string"
                    }
                ],
                "support": {
                    "version_added": "45"
                },
                "type": "function"
            }
        ],
        "namespace": "storage",
        "permissions": [
            "storage"
        ],
        "properties": {
            "local": {
                "$ref": "StorageArea",
                "description": "Items in the <code>local</code> storage area are local to each machine.",
                "mdn_url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/storage/local",
                "properties": {
                    "QUOTA_BYTES": {
                        "description": "The maximum amount (in bytes) of data that can be stored in local storage, as measured by the JSON stringification of every value plus every key's length. This value will be ignored if the extension has the <code>unlimitedStorage</code> permission. Updates that would cause this limit to be exceeded fail immediately and set $(ref:runtime.lastError).",
                        "value": 5242880
                    }
                },
                "support": {
                    "version_added": "45"
                }
            },
            "managed": {
                "$ref": "StorageArea",
                "description": "Items in the <code>managed</code> storage area are set by administrators or native applications, and are read-only for the extension; trying to modify this namespace results in an error.",
                "mdn_url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/storage/managed",
                "properties": {
                    "QUOTA_BYTES": {
                        "description": "The maximum size (in bytes) of the managed storage JSON manifest file. Files larger than this limit will fail to load.",
                        "value": 5242880
                    }
                },
                "support": {
                    "version_added": "57"
                }
            },
            "session": {
                "$ref": "StorageArea",
                "allowedContexts": [
                    "devtools"
                ],
                "description": "Items in the <code>session</code> storage area are kept in memory, and only until the either browser or extension is closed or reloaded.",
                "mdn_url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/storage/session",
                "support": {
                    "version_added": "115"
                }
            },
            "sync": {
                "$ref": "StorageAreaSync",
                "description": "Items in the <code>sync</code> storage area are synced by the browser.",
                "mdn_url": "https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/storage/sync",
                "properties": {
                    "MAX_ITEMS": {
                        "description": "The maximum number of items that can be stored in sync storage. Updates that would cause this limit to be exceeded will fail immediately and set $(ref:runtime.lastError).",
                        "value": 512
                    },
                    "MAX_SUSTAINED_WRITE_OPERATIONS_PER_MINUTE": {
                        "deprecated": "The storage.sync API no longer has a sustained write operation quota.",
                        "description": "",
                        "value": 1000000
                    },
                    "MAX_WRITE_OPERATIONS_PER_HOUR": {
                        "description": "<p>The maximum number of <code>set</code>, <code>remove</code>, or <code>clear</code> operations that can be performed each hour. This is 1 every 2 seconds, a lower ceiling than the short term higher writes-per-minute limit.</p><p>Updates that would cause this limit to be exceeded fail immediately and set $(ref:runtime.lastError).</p>",
                        "value": 1800
                    },
                    "MAX_WRITE_OPERATIONS_PER_MINUTE": {
                        "description": "<p>The maximum number of <code>set</code>, <code>remove</code>, or <code>clear</code> operations that can be performed each minute. This is 2 per second, providing higher throughput than writes-per-hour over a shorter period of time.</p><p>Updates that would cause this limit to be exceeded fail immediately and set $(ref:runtime.lastError).</p>",
                        "value": 120
                    },
                    "QUOTA_BYTES": {
                        "description": "The maximum total amount (in bytes) of data that can be stored in sync storage, as measured by the JSON stringification of every value plus every key's length. Updates that would cause this limit to be exceeded fail immediately and set $(ref:runtime.lastError).",
                        "value": 102400
                    },
                    "QUOTA_BYTES_PER_ITEM": {
                        "description": "The maximum size (in bytes) of each individual item in sync storage, as measured by the JSON stringification of its value plus its key length. Updates containing items larger than this limit will fail immediately and set $(ref:runtime.lastError).",
                        "value": 8192
                    }
                },
                "support": {
                    "version_added": "53"
                }
            }
        },
        "types": [
            {
                "id": "StorageChange",
                "properties": {
                    "newValue": {
                        "description": "The new value of the item, if there is a new value.",
                        "optional": true,
                        "type": "any"
                    },
                    "oldValue": {
                        "description": "The old value of the item, if there was an old value.",
                        "optional": true,
                        "type": "any"
                    }
                },
                "type": "object"
            },
            {
                "events": [
                    {
                        "description": "Fired when one or more items change.",
                        "name": "onChanged",
                        "parameters": [
                            {
                                "additionalProperties": {
                                    "$ref": "StorageChange"
                                },
                                "description": "Object mapping each key that changed to its corresponding $(ref:storage.StorageChange) for that item.",
                                "name": "changes",
                                "type": "object"
                            }
                        ],
                        "type": "function"
                    }
                ],
                "functions": [
                    {
                        "async": "callback",
                        "description": "Gets one or more items from storage.",
                        "name": "get",
                        "parameters": [
                            {
                                "choices": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "additionalProperties": {
                                            "type": "any"
                                        },
                                        "description": "Storage items to return in the callback, where the values are replaced with those from storage if they exist.",
                                        "type": "object"
                                    }
                                ],
                                "description": "A single key to get, list of keys to get, or a dictionary specifying default values (see description of the object).  An empty list or object will return an empty result object.  Pass in <code>null</code> to get the entire contents of storage.",
                                "name": "keys",
                                "optional": true
                            },
                            {
                                "description": "Callback with storage items, or on failure (in which case $(ref:runtime.lastError) will be set).",
                                "name": "callback",
                                "parameters": [
                                    {
                                        "additionalProperties": {
                                            "type": "any"
                                        },
                                        "description": "Object with items in their key-value mappings.",
                                        "name": "items",
                                        "type": "object"
                                    }
                                ],
                                "type": "function"
                            }
                        ],
                        "type": "function"
                    },
                    {
                        "async": "callback",
                        "description": "Gets the amount of space (in bytes) being used by one or more items.",
                        "name": "getBytesInUse",
                        "parameters": [
                            {
                                "choices": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                ],
                                "description": "A single key or list of keys to get the total usage for. An empty list will return 0. Pass in <code>null</code> to get the total usage of all of storage.",
                                "name": "keys",
                                "optional": true
                            },
                            {
                                "description": "Callback with the amount of space being used by storage, or on failure (in which case $(ref:runtime.lastError) will be set).",
                                "name": "callback",
                                "parameters": [
                                    {
                                        "description": "Amount of space being used in storage, in bytes.",
                                        "name": "bytesInUse",
                                        "type": "integer"
                                    }
                                ],
                                "type": "function"
                            }
                        ],
                        "type": "function",
                        "unsupported": true
                    },
                    {
                        "async": "callback",
                        "description": "Sets multiple items.",
                        "name": "set",
                        "parameters": [
                            {
                                "additionalProperties": {
                                    "type": "any"
                                },
                                "description": "<p>An object which gives each key/value pair to update storage with. Any other key/value pairs in storage will not be affected.</p><p>Primitive values such as numbers will serialize as expected. Values with a <code>typeof</code> <code>\"object\"</code> and <code>\"function\"</code> will typically serialize to <code>{}</code>, with the exception of <code>Array</code> (serializes as expected), <code>Date</code>, and <code>Regex</code> (serialize using their <code>String</code> representation).</p>",
                                "name": "items",
                                "type": "object"
                            },
                            {
                                "description": "Callback on success, or on failure (in which case $(ref:runtime.lastError) will be set).",
                                "name": "callback",
                                "optional": true,
                                "parameters": [],
                                "type": "function"
                            }
                        ],
                        "type": "function"
                    },
                    {
                        "async": "callback",
                        "description": "Removes one or more items from storage.",
                        "name": "remove",
                        "parameters": [
                            {
                                "choices": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                ],
                                "description": "A single key or a list of keys for items to remove.",
                                "name": "keys"
                            },
                            {
                                "description": "Callback on success, or on failure (in which case $(ref:runtime.lastError) will be set).",
                                "name": "callback",
                                "optional": true,
                                "parameters": [],
                                "type": "function"
                            }
                        ],
                        "type": "function"
                    },
                    {
                        "async": "callback",
                        "description": "Removes all items from storage.",
                        "name": "clear",
                        "parameters": [
                            {
                                "description": "Callback on success, or on failure (in which case $(ref:runtime.lastError) will be set).",
                                "name": "callback",
                                "optional": true,
                                "parameters": [],
                                "type": "function"
                            }
                        ],
                        "type": "function"
                    }
                ],
                "id": "StorageArea",
                "type": "object"
            },
            {
                "events": [
                    {
                        "description": "Fired when one or more items change.",
                        "name": "onChanged",
                        "parameters": [
                            {
                                "additionalProperties": {
                                    "$ref": "StorageChange"
                                },
                                "description": "Object mapping each key that changed to its corresponding $(ref:storage.StorageChange) for that item.",
                                "name": "changes",
                                "type": "object"
                            }
                        ],
                        "type": "function"
                    }
                ],
                "functions": [
                    {
                        "async": "callback",
                        "description": "Gets one or more items from storage.",
                        "name": "get",
                        "parameters": [
                            {
                                "choices": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    {
                                        "additionalProperties": {
                                            "type": "any"
                                        },
                                        "description": "Storage items to return in the callback, where the values are replaced with those from storage if they exist.",
                                        "type": "object"
                                    }
                                ],
                                "description": "A single key to get, list of keys to get, or a dictionary specifying default values (see description of the object).  An empty list or object will return an empty result object.  Pass in <code>null</code> to get the entire contents of storage.",
                                "name": "keys",
                                "optional": true
                            },
                            {
                                "description": "Callback with storage items, or on failure (in which case $(ref:runtime.lastError) will be set).",
                                "name": "callback",
                                "parameters": [
                                    {
                                        "additionalProperties": {
                                            "type": "any"
                                        },
                                        "description": "Object with items in their key-value mappings.",
                                        "name": "items",
                                        "type": "object"
                                    }
                                ],
                                "type": "function"
                            }
                        ],
                        "type": "function"
                    },
                    {
                        "async": "callback",
                        "description": "Gets the amount of space (in bytes) being used by one or more items.",
                        "name": "getBytesInUse",
                        "parameters": [
                            {
                                "choices": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                ],
                                "description": "A single key or list of keys to get the total usage for. An empty list will return 0. Pass in <code>null</code> to get the total usage of all of storage.",
                                "name": "keys",
                                "optional": true
                            },
                            {
                                "description": "Callback with the amount of space being used by storage, or on failure (in which case $(ref:runtime.lastError) will be set).",
                                "name": "callback",
                                "parameters": [
                                    {
                                        "description": "Amount of space being used in storage, in bytes.",
                                        "name": "bytesInUse",
                                        "type": "integer"
                                    }
                                ],
                                "type": "function"
                            }
                        ],
                        "type": "function"
                    },
                    {
                        "async": "callback",
                        "description": "Sets multiple items.",
                        "name": "set",
                        "parameters": [
                            {
                                "additionalProperties": {
                                    "type": "any"
                                },
                                "description": "<p>An object which gives each key/value pair to update storage with. Any other key/value pairs in storage will not be affected.</p><p>Primitive values such as numbers will serialize as expected. Values with a <code>typeof</code> <code>\"object\"</code> and <code>\"function\"</code> will typically serialize to <code>{}</code>, with the exception of <code>Array</code> (serializes as expected), <code>Date</code>, and <code>Regex</code> (serialize using their <code>String</code> representation).</p>",
                                "name": "items",
                                "type": "object"
                            },
                            {
                                "description": "Callback on success, or on failure (in which case $(ref:runtime.lastError) will be set).",
                                "name": "callback",
                                "optional": true,
                                "parameters": [],
                                "type": "function"
                            }
                        ],
                        "type": "function"
                    },
                    {
                        "async": "callback",
                        "description": "Removes one or more items from storage.",
                        "name": "remove",
                        "parameters": [
                            {
                                "choices": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                ],
                                "description": "A single key or a list of keys for items to remove.",
                                "name": "keys"
                            },
                            {
                                "description": "Callback on success, or on failure (in which case $(ref:runtime.lastError) will be set).",
                                "name": "callback",
                                "optional": true,
                                "parameters": [],
                                "type": "function"
                            }
                        ],
                        "type": "function"
                    },
                    {
                        "async": "callback",
                        "description": "Removes all items from storage.",
                        "name": "clear",
                        "parameters": [
                            {
                                "description": "Callback on success, or on failure (in which case $(ref:runtime.lastError) will be set).",
                                "name": "callback",
                                "optional": true,
                                "parameters": [],
                                "type": "function"
                            }
                        ],
                        "type": "function"
                    }
                ],
                "id": "StorageAreaSync",
                "type": "object"
            }
        ]
    }
]