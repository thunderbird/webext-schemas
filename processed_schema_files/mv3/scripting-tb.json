[
    {
        "namespace": "manifest",
        "types": [
            {
                "$extend": "OptionalPermission",
                "choices": [
                    {
                        "enum": [
                            "sensitiveDataUpload"
                        ],
                        "type": "string"
                    }
                ]
            }
        ]
    },
    {
        "functions": [
            {
                "async": "callback",
                "description": "Returns all registered compose scripts for this extension that match the given filter.",
                "name": "getRegisteredScripts",
                "parameters": [
                    {
                        "$ref": "ComposeScriptFilter",
                        "description": "An object to filter the extension's registered compose scripts.",
                        "name": "filter",
                        "optional": true
                    },
                    {
                        "description": "The resulting array contains the registered compose scripts.",
                        "name": "callback",
                        "parameters": [
                            {
                                "items": {
                                    "$ref": "ComposeScriptDetails"
                                },
                                "name": "scripts",
                                "type": "array"
                            }
                        ],
                        "type": "function"
                    }
                ],
                "type": "function"
            },
            {
                "async": "callback",
                "description": "Registers one or more compose scripts for this extension, which should be injected into the message compose editor. **Note:** Registered scripts will only be applied to newly opened message compose tabs. To apply the script to already open message compose tabs, manually inject your script by calling $(ref:scripting.executeScript) for each of the open <var>messageCompose</var> tabs.",
                "name": "registerScripts",
                "parameters": [
                    {
                        "description": "Contains a list of compose scripts to be registered. If there are errors during script parsing/file validation, or if the IDs specified already exist, then no scripts are registered.",
                        "items": {
                            "$ref": "ComposeScriptDetails"
                        },
                        "name": "scripts",
                        "type": "array"
                    },
                    {
                        "description": "Invoked upon completion of the registration.",
                        "name": "callback",
                        "parameters": [],
                        "type": "function"
                    }
                ],
                "type": "function"
            },
            {
                "async": "callback",
                "description": "Unregisters one or more compose scripts for this extension.",
                "name": "unregisterScripts",
                "parameters": [
                    {
                        "$ref": "ComposeScriptFilter",
                        "description": "If specified, only unregisters compose scripts which match the filter. Otherwise, all of the extension's compose scripts are unregistered.",
                        "name": "filter",
                        "optional": true
                    },
                    {
                        "description": "Invoked upon completion of the unregistration.",
                        "name": "callback",
                        "parameters": [],
                        "type": "function"
                    }
                ],
                "type": "function"
            }
        ],
        "namespace": "scripting.compose",
        "permissions": [
            "compose"
        ],
        "types": [
            {
                "id": "ComposeScriptDetails",
                "properties": {
                    "css": {
                        "description": "The list of CSS files to be injected. These are injected in the order they appear in this array.",
                        "items": {
                            "$ref": "manifest.ExtensionURL"
                        },
                        "optional": true,
                        "type": "array"
                    },
                    "id": {
                        "description": "The id of the compose script, specified in the API call.",
                        "type": "string"
                    },
                    "js": {
                        "description": "The list of JavaScript files to be injected. These are injected in the order they appear in this array.",
                        "items": {
                            "$ref": "manifest.ExtensionURL"
                        },
                        "optional": true,
                        "type": "array"
                    },
                    "runAt": {
                        "$ref": "extensionTypes.RunAt",
                        "description": "Specifies when JavaScript files are injected. The preferred and default value is <code>document_idle</code>.",
                        "optional": true
                    }
                },
                "type": "object"
            },
            {
                "id": "ComposeScriptFilter",
                "properties": {
                    "ids": {
                        "description": "The IDs of specific compose scripts to retrieve with <code>getRegisteredScripts()</code> or to unregister with <code>unregisterScripts()</code>.",
                        "items": {
                            "type": "string"
                        },
                        "optional": true,
                        "type": "array"
                    }
                },
                "type": "object"
            }
        ]
    },
    {
        "functions": [
            {
                "async": "callback",
                "description": "Returns all registered message display scripts for this extension that match the given filter.",
                "name": "getRegisteredScripts",
                "parameters": [
                    {
                        "$ref": "MessageDisplayScriptFilter",
                        "description": "An object to filter the extension's registered message display scripts.",
                        "name": "filter",
                        "optional": true
                    },
                    {
                        "description": "The resulting array contains the registered message display scripts.",
                        "name": "callback",
                        "parameters": [
                            {
                                "items": {
                                    "$ref": "MessageDisplayScriptDetails"
                                },
                                "name": "scripts",
                                "type": "array"
                            }
                        ],
                        "type": "function"
                    }
                ],
                "type": "function"
            },
            {
                "async": "callback",
                "description": "Registers one or more message display scripts for this extension, which should be injected into displayed messages. **Note:** Registered scripts will only be applied to newly opened messages. To apply the script to already open messages, manually inject your script by calling $(ref:scripting.executeScript) for each of the open <var>messageDisplay</var> tabs.",
                "name": "registerScripts",
                "parameters": [
                    {
                        "description": "Contains a list of message display scripts to be registered. If there are errors during script parsing/file validation, or if the IDs specified already exist, then no scripts are registered.",
                        "items": {
                            "$ref": "MessageDisplayScriptDetails"
                        },
                        "name": "scripts",
                        "type": "array"
                    },
                    {
                        "description": "Invoked upon completion of the registration.",
                        "name": "callback",
                        "parameters": [],
                        "type": "function"
                    }
                ],
                "type": "function"
            },
            {
                "async": "callback",
                "description": "Unregisters one or more message display scripts for this extension.",
                "name": "unregisterScripts",
                "parameters": [
                    {
                        "$ref": "MessageDisplayScriptFilter",
                        "description": "If specified, only unregisters message display scripts which match the filter. Otherwise, all of the extension's message display scripts are unregistered.",
                        "name": "filter",
                        "optional": true
                    },
                    {
                        "description": "Invoked upon completion of the unregistration.",
                        "name": "callback",
                        "parameters": [],
                        "type": "function"
                    }
                ],
                "type": "function"
            }
        ],
        "namespace": "scripting.messageDisplay",
        "permissions": [
            "messagesRead"
        ],
        "types": [
            {
                "id": "MessageDisplayScriptDetails",
                "properties": {
                    "css": {
                        "description": "The list of CSS files to be injected. These are injected in the order they appear in this array.",
                        "items": {
                            "$ref": "manifest.ExtensionURL"
                        },
                        "optional": true,
                        "type": "array"
                    },
                    "id": {
                        "description": "The id of the message display script, specified in the API call.",
                        "type": "string"
                    },
                    "js": {
                        "description": "The list of JavaScript files to be injected. These are injected in the order they appear in this array.",
                        "items": {
                            "$ref": "manifest.ExtensionURL"
                        },
                        "optional": true,
                        "type": "array"
                    },
                    "runAt": {
                        "$ref": "extensionTypes.RunAt",
                        "description": "Specifies when JavaScript files are injected. The preferred and default value is <code>document_idle</code>.",
                        "optional": true
                    }
                },
                "type": "object"
            },
            {
                "id": "MessageDisplayScriptFilter",
                "properties": {
                    "ids": {
                        "description": "The IDs of specific message display scripts to retrieve with <code>getRegisteredScripts()</code> or to unregister with <code>unregisterScripts()</code>.",
                        "items": {
                            "type": "string"
                        },
                        "optional": true,
                        "type": "array"
                    }
                },
                "type": "object"
            }
        ]
    }
]